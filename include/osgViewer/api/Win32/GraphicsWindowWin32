/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

/* Note, elements of GraphicsWindowX11 have used Prodcer/RenderSurface_X11.cpp as both
 * a guide to use of X11/GLX and copiying directly in the case of setBorder().
 * These elements are license under OSGPL as above, with Copyright (C) 2001-2004  Don Burns.
 */

#ifndef OSGVIEWER_GRAPHICSWINDOWWIN32
#define OSGVIEWER_GRAPHICSWINDOWWIN32 1

#include <osgViewer/GraphicsWindow>
#include <osgViewer/api/Win32/GraphicsHandleWin32>

namespace osgViewer
{

class OSGVIEWER_EXPORT GraphicsWindowWin32 : public osgViewer::GraphicsWindow, public osgViewer::GraphicsHandleWin32
{
    public:

        GraphicsWindowWin32(osg::GraphicsContext::Traits* traits);
        
        ~GraphicsWindowWin32();
    
        virtual bool isSameKindAs(const Object* object) const { return dynamic_cast<const GraphicsWindowWin32*>(object)!=0; }
        virtual const char* libraryName() const { return "osgViewer"; }
        virtual const char* className() const { return "GraphicsWindowWin32"; }

        virtual bool valid() const { return _valid; }
        
        /** Realize the GraphicsContext.*/
        virtual bool realizeImplementation();

        /** Return true if the graphics context has been realized and is ready to use.*/
        virtual bool isRealizedImplementation() const { return _realized; }

        /** Close the graphics context.*/
        virtual void closeImplementation();

        /** Make this graphics context current.*/
        virtual bool makeCurrentImplementation();

        /** Release the graphics context.*/
        virtual bool releaseContextImplementation();

        /** Swap the front and back buffers.*/
        virtual void swapBuffersImplementation();
        
        /** Check to see if any events have been generated.*/
        virtual bool checkEvents();

        /** Set the window's position and size.*/
        virtual bool setWindowRectangleImplementation(int x, int y, int width, int height);

        /** Set Window decoration.*/
        virtual bool setWindowDecorationImplementation(bool flag);

        /** Get focus.*/
        virtual void grabFocus();
        
        /** Get focus on if the pointer is in this window.*/
        virtual void grabFocusIfPointerInWindow();
        
        /** Override from GUIActionAdapter.*/
        virtual void requestWarpPointer(float x,float y);

        /** Raise specified window */
        virtual void raiseWindow();

        /** Set the name of the window */
        virtual void setWindowName(const std::string& /*name*/);
        
        /** Switch on/off the cursor.*/
        virtual void useCursor(bool /*cursorOn*/);
        
        /** Set mouse cursor to a specific shape.*/
        virtual void setCursor(MouseCursor cursor);

        /** Set sync-to-vblank. */
        virtual void setSyncToVBlank(bool on);

        /** Set swap group. */
        virtual void setSwapGroup(bool on, GLuint group, GLuint barrier);

        /** Handle a native (Win32) windowing event as received from the system */
        virtual LRESULT handleNativeWindowingEvent( HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam );
        
        /** WindowData is used to pass in the Win32 window handle attached the GraphicsContext::Traits structure.*/
        struct WindowData : public osg::Referenced
        {
            WindowData(HWND window, bool installEventHandler = true):
                _hwnd(window), _installEventHandler(installEventHandler) {}
                
            HWND    _hwnd;
            bool   _installEventHandler;
        };
        
    protected:
    
        void init();

        void registerWindow();
        void unregisterWindow();
        
        bool registerWindowProcedure();
        bool unregisterWindowProcedure();
        
        HGLRC createContextImplementation();
        bool createWindow();
        bool setWindow( HWND handle );
        
        void destroyWindow( bool deleteNativeWindow = true );
        void recreateWindow();
        
        bool determineWindowPositionAndStyle( unsigned int  screenNum,
                                              int           clientAreaX,
                                              int           clientAreaY,
                                              unsigned int  clientAreaWidth,
                                              unsigned int  clientAreaHeight,
                                              bool          decorated,
                                              int&          x,
                                              int&          y,
                                              unsigned int& w,
                                              unsigned int& h,
                                              unsigned int& style,
                                              unsigned int& extendedStyle );
        
        bool setPixelFormat();
        
        void adaptKey( WPARAM wParam, LPARAM lParam, int& keySymbol, unsigned int& modifierMask, int& unmodifiedKeySymbol );
                
        void transformMouseXY(float& x, float& y);
        
        void setCursorImpl(MouseCursor cursor);

        HCURSOR getOrCreateCursor(MouseCursor mouseShape);
        
        HCURSOR         _currentCursor;
        
        WNDPROC         _windowProcedure;
        
        double          _timeOfLastCheckEvents;
        
        
        
        
        int             _screenOriginX;
        int             _screenOriginY;
        unsigned int    _screenWidth;
        unsigned int    _screenHeight;
        
        int             _windowOriginXToRealize;
        int             _windowOriginYToRealize;
        unsigned int    _windowWidthToRealize;
        unsigned int    _windowHeightToRealize;
               
        bool            _initialized;
        bool            _valid;
        bool            _realized;

        bool            _ownsWindow;        
        bool            _closeWindow;
        bool            _destroyWindow;
        bool            _destroying;

        MouseCursor     _mouseCursor;

        /// Persist which mouse cursor was used before switching to the resize cursors.
        MouseCursor     _appMouseCursor;
        
        std::map<MouseCursor,HCURSOR> _mouseCursorMap;

        std::map<std::pair<int, int>, bool> _keyMap;

        std::set<int> _capturedMouseButtons;

        bool   _applyWorkaroundForMultimonitorMultithreadNVidiaWin32Issues;
};

}

#endif
